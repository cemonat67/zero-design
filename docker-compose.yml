version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: zero_design_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - ./data/csv:/app/data/csv:ro
    networks:
      - zero_design_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: zero_design_web
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_DEBUG: ${FLASK_DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY}
      CSRF_SECRET_KEY: ${CSRF_SECRET_KEY}
    ports:
      - "${FLASK_PORT:-5000}:5000"
    volumes:
      - ./data/csv:/app/data/csv:ro
      - ./data:/app/data
      - ./static:/app/static
      - ./templates:/app/templates
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zero_design_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  adminer:
    image: adminer:4.8.1
    container_name: zero_design_adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - zero_design_network

volumes:
  postgres_data:
    driver: local

networks:
  zero_design_network:
    driver: bridge