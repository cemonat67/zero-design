version: "3.9"

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: zero_design_web_prod
    restart: unless-stopped
    env_file: .env.prod
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
    command: gunicorn -w 4 -b 0.0.0.0:5000 --timeout 120 --keep-alive 2 --max-requests 1000 --max-requests-jitter 100 app:app
    volumes:
      - ./data/csv:/app/data/csv:ro
      - ./data:/app/data
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zero_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:16-alpine
    container_name: zero_design_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - zero_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: zero_design_nginx_prod
    restart: unless-stopped
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/letsencrypt:ro
      - ./nginx/www:/var/www/certbot:ro
      - ./static:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - zero_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  certbot:
    image: certbot/certbot
    container_name: zero_design_certbot
    entrypoint: /bin/sh -c
    command: >
      "trap exit TERM; while :; do
      certbot renew --webroot -w /var/www/certbot --quiet;
      sleep 12h & wait $${!};
      done;"
    volumes:
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
    networks:
      - zero_net
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # PostgreSQL backup service
  postgres_backup:
    image: postgres:16-alpine
    container_name: zero_design_backup
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
      while true; do
        sleep 24h;
        pg_dump -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name '*.sql' -mtime +7 -delete;
      done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zero_net

  # Database administration (dev only for security)
  adminer:
    image: adminer:4.8.1
    container_name: zero_design_adminer
    restart: unless-stopped
    profiles: ["dev"]
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zero_net

  # Monitoring with simple health checks
  watchtower:
    image: containrrr/watchtower
    container_name: zero_design_watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # 24 hours
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: --interval 86400 --cleanup

volumes:
  pgdata:
    driver: local
  postgres_backups:
    driver: local
  app_logs:
    driver: local

networks:
  zero_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16